{
	"version": "https://jsonfeed.org/version/1",
	"title": "Eric Gregorich | Architect",
	"icon": "https://micro.blog/ericgregorich/avatar.jpg",
	"home_page_url": "https://architect.ericgregorich.com/",
	"feed_url": "https://architect.ericgregorich.com/feed.json",
	"items": [
		
			{
				"id": "http://eg-architect.micro.blog/2024/03/01/power-apps-error.html",
				"title": "Power Apps Error Handling when using the Patch function",
				"content_html": "<p>When using the Patch Function to save data to a data source, such as Dataverse, or SQL, our user will see a red error bar at the top of the screen if any unhandled errors occur.</p>\n<blockquote>\n<p>One of the most important reasons we want to include our own error handling is so we can control the user experience. We may want to cancel further operations from executing, or log the errors in a unqiue way. We don&rsquo;t have this control if we don&rsquo;t capture our errors!</p>\n</blockquote>\n<p>For example, let&rsquo;s create a simple Dataverse table with the required columns, Name, Date Entered, and Details. If you try to use Patch to insert a record into this table without providing a value for a required field, you will receive an error.</p>\n<p>Here is our formula for creating this scenario:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">Patch</span>(\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#e6db74\">&#39;Demo Table&#39;</span>,\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#a6e22e\">Defaults</span>(<span style=\"color:#e6db74\">&#39;Demo Table&#39;</span>),\n</span></span><span style=\"display:flex;\"><span>    {\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#a6e22e\">Name</span><span style=\"color:#f92672\">:</span> <span style=\"color:#a6e22e\">txtName</span>.<span style=\"color:#a6e22e\">Value</span>,\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#e6db74\">&#39;Date Entered&#39;</span><span style=\"color:#f92672\">:</span> <span style=\"color:#a6e22e\">dteDateEntered</span>.<span style=\"color:#a6e22e\">SelectedDate</span>,\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#a6e22e\">Details</span><span style=\"color:#f92672\">:</span> <span style=\"color:#a6e22e\">txtDetails</span>.<span style=\"color:#a6e22e\">Value</span>\n</span></span><span style=\"display:flex;\"><span>    }\n</span></span><span style=\"display:flex;\"><span>);\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">Reset</span>(<span style=\"color:#a6e22e\">txtName</span>);\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">Reset</span>(<span style=\"color:#a6e22e\">txtDetails</span>);\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">Reset</span>(<span style=\"color:#a6e22e\">dteDateEntered</span>)\n</span></span></code></pre></div><!-- raw HTML omitted -->\n<p>The error returned: <code>Network error when using Patch function: Field 'tpa_dateentered' is required</code> is helpful enough, but not enough.</p>\n<p>If we look at the Monitoring Tool, we can see the details of our error.</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>Obviously, we want to validate our fields before we even execute the Patch Function, but for the purposes of this example, I&rsquo;ll add some error handling to our formula to demonstrate what&rsquo;s possible.</p>\n<p>Let&rsquo;s update our code with the <a href=\"https://learn.microsoft.com/en-us/power-platform/power-fx/reference/function-iferror#iserror\">IsError</a> function, which will let us capture the error before it is presented to the user and then do something else if an error occurs.</p>\n<p>In this example, I&rsquo;m capturing the error and using the Trace function to write out the details of the error to the Monitor tool (or Azure Application Insights if you have it enabled).</p>\n<p>When using the IsError function, we&rsquo;ll have this structure:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">If</span>(\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#a6e22e\">IsError</span>(\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#75715e\">// Use your Patch function here.\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    ),\n</span></span><span style=\"display:flex;\"><span>\t<span style=\"color:#66d9ef\">true</span> <span style=\"color:#75715e\">// Do something if there is an error.\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    ,\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">false</span> <span style=\"color:#75715e\">// Do something else (or nothing) if there are no errors\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>)\n</span></span></code></pre></div><p>Using this structure, our updated code would look like this:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">If</span>(\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#a6e22e\">IsError</span>(\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#a6e22e\">Patch</span>(\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#e6db74\">&#39;Demo Table&#39;</span>,\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#a6e22e\">Defaults</span>(<span style=\"color:#e6db74\">&#39;Demo Table&#39;</span>),\n</span></span><span style=\"display:flex;\"><span>            {\n</span></span><span style=\"display:flex;\"><span>                <span style=\"color:#a6e22e\">Name</span><span style=\"color:#f92672\">:</span> <span style=\"color:#a6e22e\">txtName</span>.<span style=\"color:#a6e22e\">Value</span>,\n</span></span><span style=\"display:flex;\"><span>                <span style=\"color:#e6db74\">&#39;Date Entered&#39;</span><span style=\"color:#f92672\">:</span> <span style=\"color:#a6e22e\">dteDateEntered</span>.<span style=\"color:#a6e22e\">SelectedDate</span>,\n</span></span><span style=\"display:flex;\"><span>                <span style=\"color:#a6e22e\">Details</span><span style=\"color:#f92672\">:</span> <span style=\"color:#a6e22e\">txtDetails</span>.<span style=\"color:#a6e22e\">Value</span>\n</span></span><span style=\"display:flex;\"><span>            }\n</span></span><span style=\"display:flex;\"><span>        )\n</span></span><span style=\"display:flex;\"><span>    ),\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#a6e22e\">Notify</span>(\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#a6e22e\">First</span>(<span style=\"color:#a6e22e\">Errors</span>(<span style=\"color:#e6db74\">&#39;Demo Table&#39;</span>)).<span style=\"color:#a6e22e\">Message</span>,\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#a6e22e\">NotificationType</span>.Error\n</span></span><span style=\"display:flex;\"><span>    );\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#a6e22e\">Trace</span>(\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#e6db74\">&#34;Error saving to Demo Table&#34;</span>,\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#a6e22e\">TraceSeverity</span>.Error,\n</span></span><span style=\"display:flex;\"><span>        {\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#a6e22e\">Screen</span><span style=\"color:#f92672\">:</span> <span style=\"color:#a6e22e\">App</span>.<span style=\"color:#a6e22e\">ActiveScreen</span>.<span style=\"color:#a6e22e\">Name</span>,\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#a6e22e\">User</span><span style=\"color:#f92672\">:</span> <span style=\"color:#a6e22e\">User</span>().<span style=\"color:#a6e22e\">Email</span>,\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#a6e22e\">Message</span><span style=\"color:#f92672\">:</span> <span style=\"color:#a6e22e\">First</span>(<span style=\"color:#a6e22e\">Errors</span>(<span style=\"color:#e6db74\">&#39;Demo Table&#39;</span>)).<span style=\"color:#a6e22e\">Message</span>,\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#a6e22e\">Column</span><span style=\"color:#f92672\">:</span> <span style=\"color:#a6e22e\">First</span>(<span style=\"color:#a6e22e\">Errors</span>(<span style=\"color:#e6db74\">&#39;Demo Table&#39;</span>)).<span style=\"color:#a6e22e\">Column</span>,\n</span></span><span style=\"display:flex;\"><span>            Error<span style=\"color:#f92672\">:</span> <span style=\"color:#a6e22e\">First</span>(<span style=\"color:#a6e22e\">Errors</span>(<span style=\"color:#e6db74\">&#39;Demo Table&#39;</span>)).Error\n</span></span><span style=\"display:flex;\"><span>        }\n</span></span><span style=\"display:flex;\"><span>    ),\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#a6e22e\">Notify</span>(\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#e6db74\">&#34;Success&#34;</span>,\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#a6e22e\">NotificationType</span>.<span style=\"color:#a6e22e\">Success</span>\n</span></span><span style=\"display:flex;\"><span>    );\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#a6e22e\">Reset</span>(<span style=\"color:#a6e22e\">txtName</span>);\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#a6e22e\">Reset</span>(<span style=\"color:#a6e22e\">txtDetails</span>);\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#a6e22e\">Reset</span>(<span style=\"color:#a6e22e\">dteDateEntered</span>)\n</span></span><span style=\"display:flex;\"><span>)\n</span></span></code></pre></div><p>If an error occurs, we&rsquo;re using a Trace function to write details to our logs. If no errors occur, we show a Success message and then reset the controls.</p>\n<p>We can see the details of our error in the Monitor Tool.</p>\n<!-- raw HTML omitted -->\n<p>Most importantly, we can stop the next operation from executing, which could cause cascading issues that are all triggered by the first error.</p>\n",
				"content_text": "When using the Patch Function to save data to a data source, such as Dataverse, or SQL, our user will see a red error bar at the top of the screen if any unhandled errors occur. \n\n> One of the most important reasons we want to include our own error handling is so we can control the user experience. We may want to cancel further operations from executing, or log the errors in a unqiue way. We don't have this control if we don't capture our errors!\n\nFor example, let's create a simple Dataverse table with the required columns, Name, Date Entered, and Details. If you try to use Patch to insert a record into this table without providing a value for a required field, you will receive an error. \n\nHere is our formula for creating this scenario:\n\n```js\nPatch(\n    'Demo Table',\n    Defaults('Demo Table'),\n    {\n        Name: txtName.Value,\n        'Date Entered': dteDateEntered.SelectedDate,\n        Details: txtDetails.Value\n    }\n);\nReset(txtName);\nReset(txtDetails);\nReset(dteDateEntered)\n```\n\n<img style=\"display: block; margin-left: auto; margin-right: auto;\" title=\"Dataverse Patch Network Error.png\" src=\"https://architect.ericgregorich.com/uploads/2024/dataverse-patch-network-error.png\" alt=\"Screenshot of a default patch throwing a network errror.\" width=\"599\" height=\"356\" border=\"0\" />\n\nThe error returned: `Network error when using Patch function: Field 'tpa_dateentered' is required` is helpful enough, but not enough.\n\nIf we look at the Monitoring Tool, we can see the details of our error.\n\n<img style=\"display:block; margin-left:auto; margin-right:auto;\" src=\"https://architect.ericgregorich.com/uploads/2024/monitortool.png\" alt=\"How to open the Monitor Tool in Power Apps.\" title=\"MonitorTool.png\" border=\"0\" width=\"381\" height=\"461\" />\n\n<img style=\"display:block; margin-left:auto; margin-right:auto;\" src=\"https://architect.ericgregorich.com/uploads/2024/errorexamplenoerrorhanding.png\" alt=\"Screenshot of the Patch error when not using any error handling.\" title=\"ErrorExampleNoErrorHanding.png\" border=\"0\" width=\"599\" height=\"247\" />\n\nObviously, we want to validate our fields before we even execute the Patch Function, but for the purposes of this example, I'll add some error handling to our formula to demonstrate what's possible.\n\nLet's update our code with the [IsError](https://learn.microsoft.com/en-us/power-platform/power-fx/reference/function-iferror#iserror) function, which will let us capture the error before it is presented to the user and then do something else if an error occurs.\n\nIn this example, I'm capturing the error and using the Trace function to write out the details of the error to the Monitor tool (or Azure Application Insights if you have it enabled).\n\nWhen using the IsError function, we'll have this structure:\n\n```js\nIf(\n    IsError(\n        // Use your Patch function here.\n    ),\n\ttrue // Do something if there is an error.\n    ,\n    false // Do something else (or nothing) if there are no errors\n)\n\n```\n\nUsing this structure, our updated code would look like this:\n\n```js\nIf(\n    IsError(\n        Patch(\n            'Demo Table',\n            Defaults('Demo Table'),\n            {\n                Name: txtName.Value,\n                'Date Entered': dteDateEntered.SelectedDate,\n                Details: txtDetails.Value\n            }\n        )\n    ),\n    Notify(\n        First(Errors('Demo Table')).Message,\n        NotificationType.Error\n    );\n    Trace(\n        \"Error saving to Demo Table\",\n        TraceSeverity.Error,\n        {\n            Screen: App.ActiveScreen.Name,\n            User: User().Email,\n            Message: First(Errors('Demo Table')).Message,\n            Column: First(Errors('Demo Table')).Column,\n            Error: First(Errors('Demo Table')).Error\n        }\n    ),\n    Notify(\n        \"Success\",\n        NotificationType.Success\n    );\n    Reset(txtName);\n    Reset(txtDetails);\n    Reset(dteDateEntered)\n)\n```\n\nIf an error occurs, we're using a Trace function to write details to our logs. If no errors occur, we show a Success message and then reset the controls.\n\nWe can see the details of our error in the Monitor Tool.\n\n<img style=\"display:block; margin-left:auto; margin-right:auto;\" src=\"https://architect.ericgregorich.com/uploads/2024/exampleerrorhandlingtracefunction.png\" alt=\"Screenshot of an error in the Monitoring Tool when we use a custom Trace function.\" title=\"ExampleErrorHandlingTraceFunction.png\" border=\"0\" width=\"878\" height=\"527\" />\n\nMost importantly, we can stop the next operation from executing, which could cause cascading issues that are all triggered by the first error. \n\n\n\n",
				"date_published": "2024-03-01T15:07:52-05:00",
				"url": "https://architect.ericgregorich.com/2024/03/01/power-apps-error.html",
				"tags": ["Power Apps"]
			},
			{
				"id": "http://eg-architect.micro.blog/2024/02/26/azure-app-registration.html",
				"title": "Azure App Registration for Select SharePoint Sites",
				"content_html": "<p>This post explains how to create an Azure App Registration and configure it to provide your application access to only select SharePoint sites.</p>\n<p>The Azure App Registration provides your application the permissions it needs to various sources, in this example, SharePoint. This eliminates the need to run your application using a user account.</p>\n<p>In this specific example, rather than giving full control to all of SharePoint, we want our app to only have access to select SharePoint sites. We can use PowerShell to set exactly which sites we want the application to have permissions to.</p>\n<h2 id=\"create-the-app-registration-in-azure\">Create the App Registration in Azure</h2>\n<p>Follow the following steps to create an Azure App Registration using a self-signed certificate.</p>\n<ul>\n<li>First, create a <a href=\"https://thepowerarchitect.com/2024/02/01/create-a-selfsigned.html\">Self-signed Certificate using PowerShell</a>.</li>\n<li>Save the .cer and .pfx files and the information used to create the certificate.</li>\n<li>Create an Azure App Registration from <a href=\"https://portal.azure.com/#view/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/~/RegisteredApps\">Azure AD</a>.\n<ul>\n<li>Search for <code>App Registrations</code>, then click on the App Registrations result.</li>\n<li>Click <code>New Registration</code>.</li>\n<li>Enter a user-friendly name.</li>\n<li>Select your Account types.</li>\n<li>Click <code>Register</code>.</li>\n</ul>\n</li>\n<li>Select <code>Certificates &amp; Secrets</code> in the left menu.</li>\n<li>Upload the .cer file created earlier.</li>\n<li>Select <code>API Permissions</code>.</li>\n<li>Select <code>Add a permission</code>.</li>\n<li>Select <code>SharePoint</code>.</li>\n<li>Select <code>Application permissions</code>.</li>\n<li>Select <code>Sites.Selected</code>.</li>\n<li>Click the <code>Add Permissions</code> button to save.</li>\n<li>As an administrator, click the <code>Grant admin consent for {Your Organization}</code>.</li>\n<li>Click <code>Yes</code> to confirm.</li>\n</ul>\n<p>Next, you&rsquo;ll use the PowerShell below to set which SharePoint sites the App Registration is allowed to access.</p>\n<h2 id=\"grant-permissions-to-select-sites-using-powershell\">Grant permissions to select sites using PowerShell</h2>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-powershell\" data-lang=\"powershell\"><span style=\"display:flex;\"><span>$targetSiteUrl = <span style=\"color:#960050;background-color:#1e0010\">‘</span>{sharepoint site url}<span style=\"color:#960050;background-color:#1e0010\">’</span>\n</span></span><span style=\"display:flex;\"><span>Connect-PnPOnline $targetSiteUrl -Interactive\n</span></span><span style=\"display:flex;\"><span>Grant-PnPAzureADAppSitePermission -AppId <span style=\"color:#960050;background-color:#1e0010\">‘</span>{app (client) id}<span style=\"color:#960050;background-color:#1e0010\">’</span> -DisplayName <span style=\"color:#960050;background-color:#1e0010\">‘</span>{app display name}<span style=\"color:#960050;background-color:#1e0010\">’</span> -Site $targetSiteUrl -Permissions Write\n</span></span></code></pre></div><h2 id=\"get-site-permission-for-a-selected-site\">Get site permission for a selected site</h2>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-powershell\" data-lang=\"powershell\"><span style=\"display:flex;\"><span>Get-PnPAzureADAppSitePermission -Site $targetSiteUrl\n</span></span></code></pre></div><h2 id=\"revoke-permission-via-powershell\">Revoke Permission via PowerShell</h2>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-powershell\" data-lang=\"powershell\"><span style=\"display:flex;\"><span>$targetSiteUrl = <span style=\"color:#e6db74\">&#39;{sharepoint site url}&#39;</span>\n</span></span><span style=\"display:flex;\"><span>Connect-PnPOnline $targetSiteUrl -Interactive\n</span></span><span style=\"display:flex;\"><span>Revoke-PnPAzureADAppSitePermission -PermissionId <span style=\"color:#e6db74\">&#39;{permissionid}&#39;</span> -Site $targetSiteUrl -Force\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>Get-PnPAzureADAppSitePermission -Site $targetSiteUrl\n</span></span></code></pre></div>",
				"content_text": "\nThis post explains how to create an Azure App Registration and configure it to provide your application access to only select SharePoint sites.\n\nThe Azure App Registration provides your application the permissions it needs to various sources, in this example, SharePoint. This eliminates the need to run your application using a user account.\n\nIn this specific example, rather than giving full control to all of SharePoint, we want our app to only have access to select SharePoint sites. We can use PowerShell to set exactly which sites we want the application to have permissions to.\n\n## Create the App Registration in Azure\n\nFollow the following steps to create an Azure App Registration using a self-signed certificate.  \n\n- First, create a [Self-signed Certificate using PowerShell](https://thepowerarchitect.com/2024/02/01/create-a-selfsigned.html).\n- Save the .cer and .pfx files and the information used to create the certificate.\n- Create an Azure App Registration from [Azure AD](https://portal.azure.com/#view/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/~/RegisteredApps).\n\t- Search for `App Registrations`, then click on the App Registrations result.\n\t- Click `New Registration`.\n\t- Enter a user-friendly name.\n\t- Select your Account types.\n\t- Click `Register`.\n- Select `Certificates & Secrets` in the left menu.\n- Upload the .cer file created earlier.\n- Select `API Permissions`.\n- Select `Add a permission`.\n- Select `SharePoint`.\n- Select `Application permissions`.\n- Select `Sites.Selected`. \n- Click the `Add Permissions` button to save.\n- As an administrator, click the `Grant admin consent for {Your Organization}`.\n- Click `Yes` to confirm.\n\nNext, you'll use the PowerShell below to set which SharePoint sites the App Registration is allowed to access.\n\n## Grant permissions to select sites using PowerShell\n\n```powershell\n$targetSiteUrl = ‘{sharepoint site url}’\nConnect-PnPOnline $targetSiteUrl -Interactive\nGrant-PnPAzureADAppSitePermission -AppId ‘{app (client) id}’ -DisplayName ‘{app display name}’ -Site $targetSiteUrl -Permissions Write\n```\n\n## Get site permission for a selected site\n\n``` powershell\nGet-PnPAzureADAppSitePermission -Site $targetSiteUrl\n```\n## Revoke Permission via PowerShell\n\n``` powershell\n$targetSiteUrl = '{sharepoint site url}'\nConnect-PnPOnline $targetSiteUrl -Interactive\nRevoke-PnPAzureADAppSitePermission -PermissionId '{permissionid}' -Site $targetSiteUrl -Force\n\nGet-PnPAzureADAppSitePermission -Site $targetSiteUrl\n```\n",
				"date_published": "2024-02-26T17:20:04-05:00",
				"url": "https://architect.ericgregorich.com/2024/02/26/azure-app-registration.html",
				"tags": ["SharePoint","Azure"]
			},
			{
				"id": "http://eg-architect.micro.blog/2024/02/23/converting-from-utc.html",
				"title": "Converting from UTC in Power Apps",
				"content_html": "<p>We can use the TimeZoneOffset function in Power Apps to adjust for the current time zone from UTC time. We would typically want to save our Dates as UTC time in any database we&rsquo;re using, and convert those dates to the local time zone when viewing them in our app.</p>\n<p>This example, takes the date value named <code>StartTime</code>, which is a UTC time, and subtracts the TimeZoneOffset value in minutes to get the local time.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-json\" data-lang=\"json\"><span style=\"display:flex;\"><span><span style=\"color:#960050;background-color:#1e0010\">DateAdd(</span> <span style=\"color:#960050;background-color:#1e0010\">StartTime,</span> <span style=\"color:#960050;background-color:#1e0010\">−TimeZoneOffset(</span> <span style=\"color:#960050;background-color:#1e0010\">StartTime</span> <span style=\"color:#960050;background-color:#1e0010\">),</span> <span style=\"color:#960050;background-color:#1e0010\">TimeUnit.Minutes</span> <span style=\"color:#960050;background-color:#1e0010\">)</span>\n</span></span></code></pre></div><p><a href=\"https://learn.microsoft.com/en-us/power-platform/power-fx/reference/function-dateadd-datediff\">DateAdd, DateDiff, and TimeZoneOffset functions - Power Platform | Microsoft Learn</a></p>\n",
				"content_text": "We can use the TimeZoneOffset function in Power Apps to adjust for the current time zone from UTC time. We would typically want to save our Dates as UTC time in any database we're using, and convert those dates to the local time zone when viewing them in our app.\n\nThis example, takes the date value named `StartTime`, which is a UTC time, and subtracts the TimeZoneOffset value in minutes to get the local time.\n\n``` json\nDateAdd( StartTime, −TimeZoneOffset( StartTime ), TimeUnit.Minutes )\n```\n\n[DateAdd, DateDiff, and TimeZoneOffset functions - Power Platform | Microsoft Learn](https://learn.microsoft.com/en-us/power-platform/power-fx/reference/function-dateadd-datediff)\n\n",
				"date_published": "2024-02-23T16:58:28-05:00",
				"url": "https://architect.ericgregorich.com/2024/02/23/converting-from-utc.html",
				"tags": ["Power Apps"]
			},
			{
				"id": "http://eg-architect.micro.blog/2024/02/23/working-with-checkbox.html",
				"title": "Working with Checkbox controls in a Power Apps Gallery",
				"content_html": "<p>Handling checkboxes can be tricky and does not always work as expected. Using a collection is a simple and robust solution. For this demo, let&rsquo;s set up a Gallery with checkbox controls to demonstrate various ways to interact with them.</p>\n<p><img src=\"https://eg-architect.micro.blog/uploads/2024/working-with-checkbox-controls-in-a-power-apps-gallery-20231127111219445.we.webp\" alt=\"Example Gallery with Checkboxes\"></p>\n<h2 id=\"load-the-data\">Load the Data</h2>\n<p>Add a button and update the OnSelect property to create a data collection.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">ClearCollect</span>(\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#a6e22e\">colSampleFood</span>,\n</span></span><span style=\"display:flex;\"><span>    {\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#a6e22e\">Id</span><span style=\"color:#f92672\">:</span> <span style=\"color:#a6e22e\">GUID</span>(),\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#a6e22e\">Title</span><span style=\"color:#f92672\">:</span> <span style=\"color:#e6db74\">&#34;Pizza&#34;</span>,\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#a6e22e\">SelectedFood</span><span style=\"color:#f92672\">:</span> <span style=\"color:#66d9ef\">false</span>\n</span></span><span style=\"display:flex;\"><span>    },\n</span></span><span style=\"display:flex;\"><span>    {\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#a6e22e\">Id</span><span style=\"color:#f92672\">:</span> <span style=\"color:#a6e22e\">GUID</span>(),\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#a6e22e\">Title</span><span style=\"color:#f92672\">:</span> <span style=\"color:#e6db74\">&#34;Hamburgers&#34;</span>,\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#a6e22e\">SelectedFood</span><span style=\"color:#f92672\">:</span> <span style=\"color:#66d9ef\">false</span>\n</span></span><span style=\"display:flex;\"><span>    },\n</span></span><span style=\"display:flex;\"><span>    {\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#a6e22e\">Id</span><span style=\"color:#f92672\">:</span> <span style=\"color:#a6e22e\">GUID</span>(),\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#a6e22e\">Title</span><span style=\"color:#f92672\">:</span> <span style=\"color:#e6db74\">&#34;Hotdogs&#34;</span>,\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#a6e22e\">SelectedFood</span><span style=\"color:#f92672\">:</span> <span style=\"color:#66d9ef\">false</span>\n</span></span><span style=\"display:flex;\"><span>    },\n</span></span><span style=\"display:flex;\"><span>    {\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#a6e22e\">Id</span><span style=\"color:#f92672\">:</span> <span style=\"color:#a6e22e\">GUID</span>(),\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#a6e22e\">Title</span><span style=\"color:#f92672\">:</span> <span style=\"color:#e6db74\">&#34;Chicken&#34;</span>,\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#a6e22e\">SelectedFood</span><span style=\"color:#f92672\">:</span> <span style=\"color:#66d9ef\">false</span>\n</span></span><span style=\"display:flex;\"><span>    }\n</span></span><span style=\"display:flex;\"><span>)\n</span></span></code></pre></div><h2 id=\"configure-your-gallery\">Configure Your Gallery</h2>\n<p>Set the <strong>Gallery.Items</strong> property to the name of your collection.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">colSampleFood</span>\n</span></span></code></pre></div><p>In your Gallery template, add a checkbox control. Set the Text property to the current title (<code>ThisItem.Title</code>). Set the Default property to <code>ThisItem.SelectedFood</code>. Adjust the size and layout of your template as needed. Your Gallery should display your data when you click the <code>Load Collection</code> button.</p>\n<h2 id=\"add-a-datatable-control-optional\">Add a DataTable control (Optional)</h2>\n<p>To easily view the data in my collection without digging through the data sources or the formula bar, I add a DataTable control to the screen and delete it afterward. To do this, set the Items property of the DataTable control to your collection colSampleFood and add all fields to the control. This will give you a live preview of the data in your collection. See the screenshot above to see how mine looks for this demo.</p>\n<h2 id=\"save-your-gallery-checkbox-state\">Save your Gallery Checkbox state</h2>\n<p>Add a Save button to your screen. Set the <code>OnSelect</code> property to the formula below. When the button is clicked, we will Patch the colSampleFood collection for each item in the Gallery with the checkbox value for that record.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">ForAll</span>(\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#a6e22e\">galDemo</span>.<span style=\"color:#a6e22e\">AllItems</span>,\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#a6e22e\">Patch</span>(\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#a6e22e\">colSampleFood</span>,\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#a6e22e\">ThisRecord</span>,\n</span></span><span style=\"display:flex;\"><span>        {<span style=\"color:#a6e22e\">SelectedFood</span><span style=\"color:#f92672\">:</span> <span style=\"color:#a6e22e\">cbIsSelected</span>.<span style=\"color:#a6e22e\">Value</span>}\n</span></span><span style=\"display:flex;\"><span>    )\n</span></span><span style=\"display:flex;\"><span>)\n</span></span></code></pre></div><p>If you added the <strong>DataTable</strong> control above, then when you click Save you should see the <strong>SelectedFood</strong> property update and match the selected values of your checkboxes.</p>\n<h2 id=\"select-all-checkboxes-in-the-gallery\">Select all checkboxes in the Gallery</h2>\n<p>A common scenario is to have a button or link on the screen that, when clicked, checks all of the checkboxes in the Gallery.</p>\n<p>One way to do this is to immediately use the OnCheck and OnUnCheck properties of the Checkbox control and patch the current item in the collection. This usually works, but I&rsquo;ve had issues patching the collection from within the Gallery for other field types and larger collections, so I avoid it.</p>\n<p>I found an easy way to select all to update the collection directly using the <a href=\"https://learn.microsoft.com/en-us/power-platform/power-fx/reference/function-update-updateif?ref=thepowerarchitect.com\">UpdateIf</a> function. Add the code below in the OnSelect property of your Select All button. It will update the colSampleFood collection, setting all unchecked items to checked. Since your Gallery uses the collection as its data source, it will update automatically.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">UpdateIf</span>( <span style=\"color:#a6e22e\">colSampleFood</span>, <span style=\"color:#a6e22e\">Not</span>(<span style=\"color:#a6e22e\">SelectedFood</span>), {<span style=\"color:#a6e22e\">SelectedFood</span><span style=\"color:#f92672\">:</span> <span style=\"color:#66d9ef\">true</span>} )\n</span></span></code></pre></div><h2 id=\"unselect-all-checkboxes-in-the-gallery\">Unselect all checkboxes in the Gallery</h2>\n<p>Unselecting all checkboxes, as you would expect, is similar to when we select them all. In the <strong>OnSelect</strong> property of the <strong>Unselect All</strong> button, add this code.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">UpdateIf</span>(\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#a6e22e\">colSampleFood</span>,\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#a6e22e\">SelectedFood</span>,\n</span></span><span style=\"display:flex;\"><span>    {<span style=\"color:#a6e22e\">SelectedFood</span><span style=\"color:#f92672\">:</span> <span style=\"color:#66d9ef\">false</span>}\n</span></span><span style=\"display:flex;\"><span>)\n</span></span></code></pre></div><p>Conclusion</p>\n<p>In this post, we learned how to add a Checkbox control to a Gallery, save the selected state of the checkbox, select all items, and unselect all items.</p>\n",
				"content_text": "\nHandling checkboxes can be tricky and does not always work as expected. Using a collection is a simple and robust solution. For this demo, let's set up a Gallery with checkbox controls to demonstrate various ways to interact with them.\n\n![Example Gallery with Checkboxes](https://eg-architect.micro.blog/uploads/2024/working-with-checkbox-controls-in-a-power-apps-gallery-20231127111219445.we.webp)\n\n## Load the Data\n\nAdd a button and update the OnSelect property to create a data collection.\n\n```js\nClearCollect(\n    colSampleFood,\n    {\n        Id: GUID(),\n        Title: \"Pizza\",\n        SelectedFood: false\n    },\n    {\n        Id: GUID(),\n        Title: \"Hamburgers\",\n        SelectedFood: false\n    },\n    {\n        Id: GUID(),\n        Title: \"Hotdogs\",\n        SelectedFood: false\n    },\n    {\n        Id: GUID(),\n        Title: \"Chicken\",\n        SelectedFood: false\n    }\n)\n```\n\n## Configure Your Gallery\n\nSet the **Gallery.Items** property to the name of your collection.\n\n```js\ncolSampleFood\n```\n\nIn your Gallery template, add a checkbox control. Set the Text property to the current title (`ThisItem.Title`). Set the Default property to `ThisItem.SelectedFood`. Adjust the size and layout of your template as needed. Your Gallery should display your data when you click the `Load Collection` button.\n\n## Add a DataTable control (Optional)\n\nTo easily view the data in my collection without digging through the data sources or the formula bar, I add a DataTable control to the screen and delete it afterward. To do this, set the Items property of the DataTable control to your collection colSampleFood and add all fields to the control. This will give you a live preview of the data in your collection. See the screenshot above to see how mine looks for this demo.\n\n## Save your Gallery Checkbox state\n\nAdd a Save button to your screen. Set the `OnSelect` property to the formula below. When the button is clicked, we will Patch the colSampleFood collection for each item in the Gallery with the checkbox value for that record.\n\n```js\nForAll(\n    galDemo.AllItems,\n    Patch(\n        colSampleFood,\n        ThisRecord,\n        {SelectedFood: cbIsSelected.Value}\n    )\n)\n```\n\nIf you added the **DataTable** control above, then when you click Save you should see the **SelectedFood** property update and match the selected values of your checkboxes.\n\n## Select all checkboxes in the Gallery\n\nA common scenario is to have a button or link on the screen that, when clicked, checks all of the checkboxes in the Gallery.\n\nOne way to do this is to immediately use the OnCheck and OnUnCheck properties of the Checkbox control and patch the current item in the collection. This usually works, but I've had issues patching the collection from within the Gallery for other field types and larger collections, so I avoid it.\n\nI found an easy way to select all to update the collection directly using the [UpdateIf](https://learn.microsoft.com/en-us/power-platform/power-fx/reference/function-update-updateif?ref=thepowerarchitect.com) function. Add the code below in the OnSelect property of your Select All button. It will update the colSampleFood collection, setting all unchecked items to checked. Since your Gallery uses the collection as its data source, it will update automatically.\n\n```js\nUpdateIf( colSampleFood, Not(SelectedFood), {SelectedFood: true} )\n```\n\n## Unselect all checkboxes in the Gallery\n\nUnselecting all checkboxes, as you would expect, is similar to when we select them all. In the **OnSelect** property of the **Unselect All** button, add this code.\n\n```js\nUpdateIf(\n    colSampleFood,\n    SelectedFood,\n    {SelectedFood: false}\n)\n```\n\nConclusion\n\nIn this post, we learned how to add a Checkbox control to a Gallery, save the selected state of the checkbox, select all items, and unselect all items.\n",
				"date_published": "2024-02-23T08:16:34-05:00",
				"url": "https://architect.ericgregorich.com/2024/02/23/working-with-checkbox.html",
				"tags": ["Power Apps"]
			},
			{
				"id": "http://eg-architect.micro.blog/2024/02/18/microsoft-power-automate.html",
				"title": "Microsoft Power Automate Approval Types",
				"content_html": "<p>Microsoft Power Automate has two main Approval Types.</p>\n<ol>\n<li>Everyone must approve - All approvers must approve.</li>\n<li>First to respond - Requires approval from one approver.</li>\n</ol>\n<h2 id=\"first-to-respond\">First to respond</h2>\n<p><img src=\"https://eg-architect.micro.blog/uploads/2024/6a76716952.jpg\" alt=\"First to Respond\"></p>\n<p>When one approver approves (or rejects), their approval task is marked as Approved (or Rejected) and moved to history. The approval tasks for the other Approvers are also marked as Approved (or Rejected) and moved to history. If any approvers look at that approval task, it will show a message saying the task has already been completed. No notification is sent.</p>\n<p>Only one approver must approve (or Reject).</p>\n<h2 id=\"everyone-must-approve\">Everyone must approve</h2>\n<p><img src=\"https://eg-architect.micro.blog/uploads/2024/e785452218.jpg\" alt=\"Everyone must approve\"></p>\n<p>When one approver approves, their approval task is marked as Approved and moved to history. The other approval tasks remain pending. All tasks must be approved before the workflow continues to the following action. However, if any approvers reject their task, all of the approval tasks are marked as Rejected and moved to history. Then, the following action in the workflow is triggered.</p>\n",
				"content_text": "\nMicrosoft Power Automate has two main Approval Types.\n\n1. Everyone must approve - All approvers must approve.\n2. First to respond - Requires approval from one approver. \n\n## First to respond\n   \n   ![First to Respond](https://eg-architect.micro.blog/uploads/2024/6a76716952.jpg)\n\n\nWhen one approver approves (or rejects), their approval task is marked as Approved (or Rejected) and moved to history. The approval tasks for the other Approvers are also marked as Approved (or Rejected) and moved to history. If any approvers look at that approval task, it will show a message saying the task has already been completed. No notification is sent.\n\nOnly one approver must approve (or Reject).\n\n## Everyone must approve\n\n![Everyone must approve](https://eg-architect.micro.blog/uploads/2024/e785452218.jpg)\n\nWhen one approver approves, their approval task is marked as Approved and moved to history. The other approval tasks remain pending. All tasks must be approved before the workflow continues to the following action. However, if any approvers reject their task, all of the approval tasks are marked as Rejected and moved to history. Then, the following action in the workflow is triggered.\n",
				"date_published": "2024-02-18T08:00:00-05:00",
				"url": "https://architect.ericgregorich.com/2024/02/18/microsoft-power-automate.html",
				"tags": ["Power Automate"]
			},
			{
				"id": "http://eg-architect.micro.blog/2024/02/14/validate-your-power.html",
				"title": "Validate your Power Automate Licenses",
				"content_html": "<p>Microsoft has provided some PowerShell that allows admins to check their Power Platform Environments for invalid Microsoft Power Automate Licenses before it becomes an issue.</p>\n<blockquote>\n<p>Unlicensed Power Automate Flows will be turned off. Microsoft is enforcing licensing on all Power Automate flows. The flow owner will be notified if any of your flows do not meet licensing requirements. The flow will turn off if not compliant after x days. Read the <a href=\"https://learn.microsoft.com/en-us/power-platform/admin/power-automate-licensing/faqs\">FAQ</a> for licensing details.</p>\n</blockquote>\n<h2 id=\"open-powershell\">Open PowerShell</h2>\n<p>First, open PowerShell on your machine (search for PowerShell), then open it as an administrator.</p>\n<h2 id=\"browse-to-a-location-to-save-the-output\">Browse to a location to save the output</h2>\n<p>Next, enter <code>CD</code> and then the path to where you want to export the results. For me, my path is <code>C:\\Local\\Licensing</code>. Click Enter to see your directory change in your PowerShell prompt.</p>\n<h2 id=\"install-the-modules\">Install the modules</h2>\n<p>We need to install the PowerShell modules required to run our command.</p>\n<p>Copy the following into your PowerShell terminal and click Enter.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-shell\" data-lang=\"shell\"><span style=\"display:flex;\"><span>Install-Module -Name Microsoft.PowerApps.Administration.PowerShell -Force  \n</span></span><span style=\"display:flex;\"><span>Install-Module -Name Microsoft.PowerApps.PowerShell -AllowClobber -Force\n</span></span></code></pre></div><h2 id=\"run-get-adminflowatriskofsuspension\">Run Get-AdminFlowAtRiskOfSuspension</h2>\n<p>Now, we can run our command. The command will check if any Power Automate flows in this environment are at risk and download the CSV file you specify.</p>\n<p>Please copy the following PowerShell, but change the Environment Name and, optionally, the Path before running it. I’d do this in Notepad first, then copy the results into the PowerShell terminal.</p>\n<blockquote>\n<p>Find your Environment Name You can find your environment by visiting the <a href=\"https://admin.powerplatform.microsoft.com/environments\">Environments</a> page in the Power Platform Admin Center. I always click into the environment and use the Environment ID provided on the summary screen.</p>\n</blockquote>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-shell\" data-lang=\"shell\"><span style=\"display:flex;\"><span>Get-AdminFlowAtRiskOfSuspension -EnvironmentName &lt;ENV_NAME&gt; -ApiVersion <span style=\"color:#e6db74\">&#39;2016-11-01&#39;</span> | Export-Csv -Path suspensionList.csv -NoTypeInformation\n</span></span></code></pre></div><p>When you run this command, it will open a window that asks you to authenticate to your SharePoint tenant.</p>\n<p>After logging in, the results should be exported to a CSV file in the path you navigated earlier.</p>\n<h2 id=\"read-your-results\">Read your results</h2>\n<p>If your CSV file is empty, you should be good to go. <strong>Remember to check each of your environments!</strong></p>\n<p>If you have results in your CSV, unfortunately, that means you have some invalid licenses to deal with.</p>\n<p>Your CSV file will have all the details you need to identify the flow, why it was flagged, and recommendations to resolve the licensing issue.</p>\n<h2 id=\"how-to-resolve-licensing-issues\">How to resolve licensing issues</h2>\n<p>The best option is to read the <a href=\"https://learn.microsoft.com/en-us/power-platform/admin/power-automate-licensing/faqs\">FAQ</a> provided by Microsoft.</p>\n<p>If your Flow is created to support your Power App, you can <a href=\"https://learn.microsoft.com/en-us/power-automate/associate-flow-to-app\">Associate Your Flow</a>, with your Power App. This assumes your flow runs in the app’s context and uses the same data sources for triggers or actions. Scheduled and automated cloud flows must be linked to the app through <a href=\"https://learn.microsoft.com/en-us/power-platform/admin/powerapps-powershell#associate-in-context-flows-to-an-app\">PowerShell</a>, but others can be connected directly from the flow details page (see bottom-right corner).</p>\n",
				"content_text": "Microsoft has provided some PowerShell that allows admins to check their Power Platform Environments for invalid Microsoft Power Automate Licenses before it becomes an issue.\n\n> Unlicensed Power Automate Flows will be turned off. Microsoft is enforcing licensing on all Power Automate flows. The flow owner will be notified if any of your flows do not meet licensing requirements. The flow will turn off if not compliant after x days. Read the [FAQ](https://learn.microsoft.com/en-us/power-platform/admin/power-automate-licensing/faqs) for licensing details.\n\n## Open PowerShell\n\nFirst, open PowerShell on your machine (search for PowerShell), then open it as an administrator.\n\n## Browse to a location to save the output\n\nNext, enter `CD` and then the path to where you want to export the results. For me, my path is `C:\\Local\\Licensing`. Click Enter to see your directory change in your PowerShell prompt.\n\n## Install the modules\n\nWe need to install the PowerShell modules required to run our command.\n\nCopy the following into your PowerShell terminal and click Enter.\n\n```shell\nInstall-Module -Name Microsoft.PowerApps.Administration.PowerShell -Force  \nInstall-Module -Name Microsoft.PowerApps.PowerShell -AllowClobber -Force\n```\n\n## Run Get-AdminFlowAtRiskOfSuspension\n\nNow, we can run our command. The command will check if any Power Automate flows in this environment are at risk and download the CSV file you specify.\n\nPlease copy the following PowerShell, but change the Environment Name and, optionally, the Path before running it. I’d do this in Notepad first, then copy the results into the PowerShell terminal.\n\n> Find your Environment Name You can find your environment by visiting the [Environments](https://admin.powerplatform.microsoft.com/environments) page in the Power Platform Admin Center. I always click into the environment and use the Environment ID provided on the summary screen.\n\n```shell\nGet-AdminFlowAtRiskOfSuspension -EnvironmentName <ENV_NAME> -ApiVersion '2016-11-01' | Export-Csv -Path suspensionList.csv -NoTypeInformation\n```\n\nWhen you run this command, it will open a window that asks you to authenticate to your SharePoint tenant.\n\nAfter logging in, the results should be exported to a CSV file in the path you navigated earlier.\n\n## Read your results\n\nIf your CSV file is empty, you should be good to go. **Remember to check each of your environments!**\n\nIf you have results in your CSV, unfortunately, that means you have some invalid licenses to deal with.\n\nYour CSV file will have all the details you need to identify the flow, why it was flagged, and recommendations to resolve the licensing issue.\n\n## How to resolve licensing issues\n\nThe best option is to read the [FAQ](https://learn.microsoft.com/en-us/power-platform/admin/power-automate-licensing/faqs) provided by Microsoft.\n\nIf your Flow is created to support your Power App, you can [Associate Your Flow](https://learn.microsoft.com/en-us/power-automate/associate-flow-to-app), with your Power App. This assumes your flow runs in the app’s context and uses the same data sources for triggers or actions. Scheduled and automated cloud flows must be linked to the app through [PowerShell](https://learn.microsoft.com/en-us/power-platform/admin/powerapps-powershell#associate-in-context-flows-to-an-app), but others can be connected directly from the flow details page (see bottom-right corner).\n",
				"date_published": "2024-02-14T08:52:06-05:00",
				"url": "https://architect.ericgregorich.com/2024/02/14/validate-your-power.html",
				"tags": ["Power Automate"]
			},
			{
				"id": "http://eg-architect.micro.blog/2024/02/01/create-a-selfsigned.html",
				"title": "Create a self-signed Certificate using PowerShell",
				"content_html": "<p>Run the following PowerShell to create a self-signed certificate using Windows and PowerShell. Useful for creating certificates to use in Azure App Registrations.</p>\n<ul>\n<li>Open Windows PowerShell ISE as an administrator.</li>\n<li>Copy and paste the PowerShell below into the editor.</li>\n<li>Use the <code>cd</code> command to change to a directory of your choice where you want to save the certificate files.</li>\n<li>Execute the code. You will be prompted for several input parameters.\n<ul>\n<li>CommonName: Give your certificate a name you will recognize.</li>\n<li>StartDate: The date your certificate will become valid.</li>\n<li>EndDate: The date your certificate should expire.</li>\n<li>Password: A unique password for your certificate.</li>\n<li>Press enter.\nYou&rsquo;ll end up with something like this. In my case, the <code>.cer</code> and <code>.pfx</code> files were saved to c:\\local.</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://eg-architect.micro.blog/uploads/2024/8b24e4ea0b.png\" alt=\"A screenshot of the results from running the provided PowerShell.\"></p>\n<p>Here is the script.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-powershell\" data-lang=\"powershell\"><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">Param</span>(\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>   [Parameter(<span style=\"color:#a6e22e\">Mandatory</span>=$true)]\n</span></span><span style=\"display:flex;\"><span>   [<span style=\"color:#66d9ef\">string</span>]$CommonName,\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>   [Parameter(<span style=\"color:#a6e22e\">Mandatory</span>=$true)]\n</span></span><span style=\"display:flex;\"><span>   [<span style=\"color:#66d9ef\">DateTime</span>]$StartDate,\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>   [Parameter(<span style=\"color:#a6e22e\">Mandatory</span>=$true)]\n</span></span><span style=\"display:flex;\"><span>   [<span style=\"color:#66d9ef\">DateTime</span>]$EndDate,\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>   [Parameter(<span style=\"color:#a6e22e\">Mandatory</span>=$false, <span style=\"color:#a6e22e\">HelpMessage</span>=<span style=\"color:#e6db74\">&#34;Will overwrite existing certificates&#34;</span>)]\n</span></span><span style=\"display:flex;\"><span>   [<span style=\"color:#66d9ef\">Switch</span>]$Force,\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>   [Parameter(<span style=\"color:#a6e22e\">Mandatory</span>=$false)]\n</span></span><span style=\"display:flex;\"><span>   [<span style=\"color:#66d9ef\">SecureString</span>]$Password\n</span></span><span style=\"display:flex;\"><span>)\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"># DO NOT MODIFY BELOW</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">function</span> CreateSelfSignedCertificate(){\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#75715e\">#Remove and existing certificates with the same common name from personal and root stores</span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#75715e\">#Need to be very wary of this as could break something</span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">if</span>($CommonName.ToLower().StartsWith(<span style=\"color:#e6db74\">&#34;cn=&#34;</span>))\n</span></span><span style=\"display:flex;\"><span>    {\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#75715e\"># Remove CN from common name</span>\n</span></span><span style=\"display:flex;\"><span>        $CommonName = $CommonName.Substring(<span style=\"color:#ae81ff\">3</span>)\n</span></span><span style=\"display:flex;\"><span>    }\n</span></span><span style=\"display:flex;\"><span>    $certs = Get-ChildItem -Path Cert<span style=\"color:#960050;background-color:#1e0010\">:</span>\\LocalMachine\\my | Where-Object{$_.Subject <span style=\"color:#f92672\">-eq</span> <span style=\"color:#e6db74\">&#34;CN=</span>$CommonName<span style=\"color:#e6db74\">&#34;</span>}\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">if</span>($certs <span style=\"color:#f92672\">-ne</span> $null <span style=\"color:#f92672\">-and</span> $certs.Length <span style=\"color:#f92672\">-gt</span> <span style=\"color:#ae81ff\">0</span>)\n</span></span><span style=\"display:flex;\"><span>    {\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#66d9ef\">if</span>($Force)\n</span></span><span style=\"display:flex;\"><span>        {\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#66d9ef\">foreach</span>($c <span style=\"color:#66d9ef\">in</span> $certs)\n</span></span><span style=\"display:flex;\"><span>            {\n</span></span><span style=\"display:flex;\"><span>                remove-item $c.PSPath\n</span></span><span style=\"display:flex;\"><span>            }\n</span></span><span style=\"display:flex;\"><span>        } <span style=\"color:#66d9ef\">else</span> {\n</span></span><span style=\"display:flex;\"><span>            Write-Host -ForegroundColor Red <span style=\"color:#e6db74\">&#34;One or more certificates with the same common name (CN=</span>$CommonName<span style=\"color:#e6db74\">) are already located in the local certificate store. Use -Force to remove them&#34;</span>;\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#66d9ef\">return</span> $false\n</span></span><span style=\"display:flex;\"><span>        }\n</span></span><span style=\"display:flex;\"><span>    }\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>    $name = new-object -com <span style=\"color:#e6db74\">&#34;X509Enrollment.CX500DistinguishedName.1&#34;</span>\n</span></span><span style=\"display:flex;\"><span>    $name.Encode(<span style=\"color:#e6db74\">&#34;CN=</span>$CommonName<span style=\"color:#e6db74\">&#34;</span>, <span style=\"color:#ae81ff\">0</span>)\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>    $key = new-object -com <span style=\"color:#e6db74\">&#34;X509Enrollment.CX509PrivateKey.1&#34;</span>\n</span></span><span style=\"display:flex;\"><span>    $key.ProviderName = <span style=\"color:#e6db74\">&#34;Microsoft RSA SChannel Cryptographic Provider&#34;</span>\n</span></span><span style=\"display:flex;\"><span>    $key.KeySpec = <span style=\"color:#ae81ff\">1</span>\n</span></span><span style=\"display:flex;\"><span>    $key.Length = <span style=\"color:#ae81ff\">2048</span>\n</span></span><span style=\"display:flex;\"><span>    $key.SecurityDescriptor = <span style=\"color:#e6db74\">&#34;D:PAI(A;;0xd01f01ff;;;SY)(A;;0xd01f01ff;;;BA)(A;;0x80120089;;;NS)&#34;</span>\n</span></span><span style=\"display:flex;\"><span>    $key.MachineContext = <span style=\"color:#ae81ff\">1</span>\n</span></span><span style=\"display:flex;\"><span>    $key.ExportPolicy = <span style=\"color:#ae81ff\">1</span> <span style=\"color:#75715e\"># This is required to allow the private key to be exported</span>\n</span></span><span style=\"display:flex;\"><span>    $key.Create()\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>    $serverauthoid = new-object -com <span style=\"color:#e6db74\">&#34;X509Enrollment.CObjectId.1&#34;</span>\n</span></span><span style=\"display:flex;\"><span>    $serverauthoid.InitializeFromValue(<span style=\"color:#e6db74\">&#34;1.3.6.1.5.5.7.3.1&#34;</span>) <span style=\"color:#75715e\"># Server Authentication</span>\n</span></span><span style=\"display:flex;\"><span>    $ekuoids = new-object -com <span style=\"color:#e6db74\">&#34;X509Enrollment.CObjectIds.1&#34;</span>\n</span></span><span style=\"display:flex;\"><span>    $ekuoids.add($serverauthoid)\n</span></span><span style=\"display:flex;\"><span>    $ekuext = new-object -com <span style=\"color:#e6db74\">&#34;X509Enrollment.CX509ExtensionEnhancedKeyUsage.1&#34;</span>\n</span></span><span style=\"display:flex;\"><span>    $ekuext.InitializeEncode($ekuoids)\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>    $cert = new-object -com <span style=\"color:#e6db74\">&#34;X509Enrollment.CX509CertificateRequestCertificate.1&#34;</span>\n</span></span><span style=\"display:flex;\"><span>    $cert.InitializeFromPrivateKey(<span style=\"color:#ae81ff\">2</span>, $key, <span style=\"color:#e6db74\">&#34;&#34;</span>)\n</span></span><span style=\"display:flex;\"><span>    $cert.Subject = $name\n</span></span><span style=\"display:flex;\"><span>    $cert.Issuer = $cert.Subject\n</span></span><span style=\"display:flex;\"><span>    $cert.NotBefore = $StartDate\n</span></span><span style=\"display:flex;\"><span>    $cert.NotAfter = $EndDate\n</span></span><span style=\"display:flex;\"><span>    $cert.X509Extensions.Add($ekuext)\n</span></span><span style=\"display:flex;\"><span>    $cert.Encode()\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>    $enrollment = new-object -com <span style=\"color:#e6db74\">&#34;X509Enrollment.CX509Enrollment.1&#34;</span>\n</span></span><span style=\"display:flex;\"><span>    $enrollment.InitializeFromRequest($cert)\n</span></span><span style=\"display:flex;\"><span>    $certdata = $enrollment.CreateRequest(<span style=\"color:#ae81ff\">0</span>)\n</span></span><span style=\"display:flex;\"><span>    $enrollment.InstallResponse(<span style=\"color:#ae81ff\">2</span>, $certdata, <span style=\"color:#ae81ff\">0</span>, <span style=\"color:#e6db74\">&#34;&#34;</span>)\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">return</span> $true\n</span></span><span style=\"display:flex;\"><span>}\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">function</span> ExportPFXFile()\n</span></span><span style=\"display:flex;\"><span>{\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">if</span>($CommonName.ToLower().StartsWith(<span style=\"color:#e6db74\">&#34;cn=&#34;</span>))\n</span></span><span style=\"display:flex;\"><span>    {\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#75715e\"># Remove CN from common name</span>\n</span></span><span style=\"display:flex;\"><span>        $CommonName = $CommonName.Substring(<span style=\"color:#ae81ff\">3</span>)\n</span></span><span style=\"display:flex;\"><span>    }\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">if</span>($Password <span style=\"color:#f92672\">-eq</span> $null)\n</span></span><span style=\"display:flex;\"><span>    {\n</span></span><span style=\"display:flex;\"><span>        $Password = Read-Host -Prompt <span style=\"color:#e6db74\">&#34;Enter Password to protect private key&#34;</span> -AsSecureString\n</span></span><span style=\"display:flex;\"><span>    }\n</span></span><span style=\"display:flex;\"><span>    $cert = Get-ChildItem -Path Cert<span style=\"color:#960050;background-color:#1e0010\">:</span>\\LocalMachine\\my | where-object{$_.Subject <span style=\"color:#f92672\">-eq</span> <span style=\"color:#e6db74\">&#34;CN=</span>$CommonName<span style=\"color:#e6db74\">&#34;</span>}\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>    Export-PfxCertificate -Cert $cert -Password $Password -FilePath <span style=\"color:#e6db74\">&#34;</span>$($CommonName)<span style=\"color:#e6db74\">.pfx&#34;</span>\n</span></span><span style=\"display:flex;\"><span>    Export-Certificate -Cert $cert -Type CERT -FilePath <span style=\"color:#e6db74\">&#34;</span>$CommonName<span style=\"color:#e6db74\">.cer&#34;</span>\n</span></span><span style=\"display:flex;\"><span>}\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">function</span> RemoveCertsFromStore()\n</span></span><span style=\"display:flex;\"><span>{\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#75715e\"># Once the certificates have been been exported we can safely remove them from the store</span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">if</span>($CommonName.ToLower().StartsWith(<span style=\"color:#e6db74\">&#34;cn=&#34;</span>))\n</span></span><span style=\"display:flex;\"><span>    {\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#75715e\"># Remove CN from common name</span>\n</span></span><span style=\"display:flex;\"><span>        $CommonName = $CommonName.Substring(<span style=\"color:#ae81ff\">3</span>)\n</span></span><span style=\"display:flex;\"><span>    }\n</span></span><span style=\"display:flex;\"><span>    $certs = Get-ChildItem -Path Cert<span style=\"color:#960050;background-color:#1e0010\">:</span>\\LocalMachine\\my | Where-Object{$_.Subject <span style=\"color:#f92672\">-eq</span> <span style=\"color:#e6db74\">&#34;CN=</span>$CommonName<span style=\"color:#e6db74\">&#34;</span>}\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">foreach</span>($c <span style=\"color:#66d9ef\">in</span> $certs)\n</span></span><span style=\"display:flex;\"><span>    {\n</span></span><span style=\"display:flex;\"><span>        remove-item $c.PSPath\n</span></span><span style=\"display:flex;\"><span>    }\n</span></span><span style=\"display:flex;\"><span>} <span style=\"color:#66d9ef\">if</span>(CreateSelfSignedCertificate)\n</span></span><span style=\"display:flex;\"><span>{\n</span></span><span style=\"display:flex;\"><span>    ExportPFXFile\n</span></span><span style=\"display:flex;\"><span>    RemoveCertsFromStore\n</span></span><span style=\"display:flex;\"><span>}\n</span></span></code></pre></div>",
				"content_text": "Run the following PowerShell to create a self-signed certificate using Windows and PowerShell. Useful for creating certificates to use in Azure App Registrations.\n\n- Open Windows PowerShell ISE as an administrator.\n- Copy and paste the PowerShell below into the editor.\n- Use the `cd` command to change to a directory of your choice where you want to save the certificate files.\n- Execute the code. You will be prompted for several input parameters.\n\t- CommonName: Give your certificate a name you will recognize.\n\t- StartDate: The date your certificate will become valid.\n\t- EndDate: The date your certificate should expire.\n\t- Password: A unique password for your certificate.\n\t- Press enter.\nYou'll end up with something like this. In my case, the `.cer` and `.pfx` files were saved to c:\\local.\n\n![A screenshot of the results from running the provided PowerShell.](https://eg-architect.micro.blog/uploads/2024/8b24e4ea0b.png)\n\nHere is the script.\n\n```powershell\nParam(\n\n   [Parameter(Mandatory=$true)]\n   [string]$CommonName,\n\n   [Parameter(Mandatory=$true)]\n   [DateTime]$StartDate,\n\n   [Parameter(Mandatory=$true)]\n   [DateTime]$EndDate,\n\n   [Parameter(Mandatory=$false, HelpMessage=\"Will overwrite existing certificates\")]\n   [Switch]$Force,\n\n   [Parameter(Mandatory=$false)]\n   [SecureString]$Password\n)\n\n# DO NOT MODIFY BELOW\n\nfunction CreateSelfSignedCertificate(){\n\n    #Remove and existing certificates with the same common name from personal and root stores\n    #Need to be very wary of this as could break something\n    if($CommonName.ToLower().StartsWith(\"cn=\"))\n    {\n        # Remove CN from common name\n        $CommonName = $CommonName.Substring(3)\n    }\n    $certs = Get-ChildItem -Path Cert:\\LocalMachine\\my | Where-Object{$_.Subject -eq \"CN=$CommonName\"}\n    if($certs -ne $null -and $certs.Length -gt 0)\n    {\n        if($Force)\n        {\n\n            foreach($c in $certs)\n            {\n                remove-item $c.PSPath\n            }\n        } else {\n            Write-Host -ForegroundColor Red \"One or more certificates with the same common name (CN=$CommonName) are already located in the local certificate store. Use -Force to remove them\";\n            return $false\n        }\n    }\n\n    $name = new-object -com \"X509Enrollment.CX500DistinguishedName.1\"\n    $name.Encode(\"CN=$CommonName\", 0)\n\n    $key = new-object -com \"X509Enrollment.CX509PrivateKey.1\"\n    $key.ProviderName = \"Microsoft RSA SChannel Cryptographic Provider\"\n    $key.KeySpec = 1\n    $key.Length = 2048\n    $key.SecurityDescriptor = \"D:PAI(A;;0xd01f01ff;;;SY)(A;;0xd01f01ff;;;BA)(A;;0x80120089;;;NS)\"\n    $key.MachineContext = 1\n    $key.ExportPolicy = 1 # This is required to allow the private key to be exported\n    $key.Create()\n\n    $serverauthoid = new-object -com \"X509Enrollment.CObjectId.1\"\n    $serverauthoid.InitializeFromValue(\"1.3.6.1.5.5.7.3.1\") # Server Authentication\n    $ekuoids = new-object -com \"X509Enrollment.CObjectIds.1\"\n    $ekuoids.add($serverauthoid)\n    $ekuext = new-object -com \"X509Enrollment.CX509ExtensionEnhancedKeyUsage.1\"\n    $ekuext.InitializeEncode($ekuoids)\n\n    $cert = new-object -com \"X509Enrollment.CX509CertificateRequestCertificate.1\"\n    $cert.InitializeFromPrivateKey(2, $key, \"\")\n    $cert.Subject = $name\n    $cert.Issuer = $cert.Subject\n    $cert.NotBefore = $StartDate\n    $cert.NotAfter = $EndDate\n    $cert.X509Extensions.Add($ekuext)\n    $cert.Encode()\n\n    $enrollment = new-object -com \"X509Enrollment.CX509Enrollment.1\"\n    $enrollment.InitializeFromRequest($cert)\n    $certdata = $enrollment.CreateRequest(0)\n    $enrollment.InstallResponse(2, $certdata, 0, \"\")\n    return $true\n}\n\nfunction ExportPFXFile()\n{\n    if($CommonName.ToLower().StartsWith(\"cn=\"))\n    {\n        # Remove CN from common name\n        $CommonName = $CommonName.Substring(3)\n    }\n    if($Password -eq $null)\n    {\n        $Password = Read-Host -Prompt \"Enter Password to protect private key\" -AsSecureString\n    }\n    $cert = Get-ChildItem -Path Cert:\\LocalMachine\\my | where-object{$_.Subject -eq \"CN=$CommonName\"}\n\n    Export-PfxCertificate -Cert $cert -Password $Password -FilePath \"$($CommonName).pfx\"\n    Export-Certificate -Cert $cert -Type CERT -FilePath \"$CommonName.cer\"\n}\n\nfunction RemoveCertsFromStore()\n{\n    # Once the certificates have been been exported we can safely remove them from the store\n    if($CommonName.ToLower().StartsWith(\"cn=\"))\n    {\n        # Remove CN from common name\n        $CommonName = $CommonName.Substring(3)\n    }\n    $certs = Get-ChildItem -Path Cert:\\LocalMachine\\my | Where-Object{$_.Subject -eq \"CN=$CommonName\"}\n    foreach($c in $certs)\n    {\n        remove-item $c.PSPath\n    }\n} if(CreateSelfSignedCertificate)\n{\n    ExportPFXFile\n    RemoveCertsFromStore\n}\n```\n",
				"date_published": "2024-02-01T08:00:00-05:00",
				"url": "https://architect.ericgregorich.com/2024/02/01/create-a-selfsigned.html",
				"tags": ["Azure"]
			},
			{
				"id": "http://eg-architect.micro.blog/2024/01/30/infopath-end-of.html",
				"title": "InfoPath 2013 End of Support",
				"content_html": "<p>InfoPath 2013 client and InfoPath Forms Services in SharePoint Online will end support in July 2026.</p>\n<p>There is an <a href=\"https://pnp.github.io/pnpassessment/infopath/readme.html\">InfoPath Forms Services Assessment tool</a> that can help identify and evaluate usage on your tenant.</p>\n<blockquote>\n<p>The Microsoft 365 Assessment Tool helps you identify and evaluate the InfoPath Forms Services usage on your tenant by providing you the <a href=\"https://pnp.github.io/pnpassessment/infopath/assess.html\">usage data of InfoPath Forms Services</a>, and generating a <a href=\"https://pnp.github.io/pnpassessment/infopath/report-intro.html\">Power BI report</a> to help plan migrating InfoPath Forms Services usage to Power Apps, Power Automate, Forms or other supported solutions.</p>\n</blockquote>\n",
				"content_text": "InfoPath 2013 client and InfoPath Forms Services in SharePoint Online will end support in July 2026.\n\nThere is an [InfoPath Forms Services Assessment tool](https://pnp.github.io/pnpassessment/infopath/readme.html) that can help identify and evaluate usage on your tenant.\n\n> The Microsoft 365 Assessment Tool helps you identify and evaluate the InfoPath Forms Services usage on your tenant by providing you the [usage data of InfoPath Forms Services](https://pnp.github.io/pnpassessment/infopath/assess.html), and generating a [Power BI report](https://pnp.github.io/pnpassessment/infopath/report-intro.html) to help plan migrating InfoPath Forms Services usage to Power Apps, Power Automate, Forms or other supported solutions.\n",
				"date_published": "2024-01-30T09:00:00-05:00",
				"url": "https://architect.ericgregorich.com/2024/01/30/infopath-end-of.html",
				"tags": ["SharePoint"]
			},
			{
				"id": "http://eg-architect.micro.blog/2024/01/16/the-power-apps.html",
				"title": "The Power Apps With Function",
				"content_html": "<p>The Microsoft Power Apps <a href=\"https://learn.microsoft.com/en-us/power-platform/power-fx/reference/function-with\">With function</a> is a powerful way to divide complex formulas into smaller pieces. It is useful when used within a ForAll, since we can’t set variables within a ForAll. Since the formula is contained, it is preferred over context variables created using UpdateContext or global variables created using Set.</p>\n<p>The syntax looks like this:</p>\n<pre tabindex=\"0\"><code>With(\n { \n   myValue1: //add some logic\n },\n //Do something with the myValue1result\n)\n</code></pre><p>You can also have nested With functions.</p>\n<pre tabindex=\"0\"><code>With(\n { \n   myValue1: //add some logic\n },\n  With(\n  {\n   myValue2: // do something with myValue1\n  },\n  //Do something with myValue2\n)\n</code></pre><p>Or even run the With function within a ForAll. You can also run ForEach within the With function itself.</p>\n<pre tabindex=\"0\"><code>ForAll(galMyItems.AllItems As galSelectedItem, \n With(\n {\n   myValue1: //add some logic with galSelectedItem\n },\n //Do something with the myValue1result\n )\n)\n</code></pre>",
				"content_text": "The Microsoft Power Apps [With function](https://learn.microsoft.com/en-us/power-platform/power-fx/reference/function-with) is a powerful way to divide complex formulas into smaller pieces. It is useful when used within a ForAll, since we can’t set variables within a ForAll. Since the formula is contained, it is preferred over context variables created using UpdateContext or global variables created using Set.\n\nThe syntax looks like this:\n\n```\nWith(\n { \n   myValue1: //add some logic\n },\n //Do something with the myValue1result\n)\n```\n\nYou can also have nested With functions.\n\n```\nWith(\n { \n   myValue1: //add some logic\n },\n  With(\n  {\n   myValue2: // do something with myValue1\n  },\n  //Do something with myValue2\n)\n```\n\nOr even run the With function within a ForAll. You can also run ForEach within the With function itself.\n\n```\nForAll(galMyItems.AllItems As galSelectedItem, \n With(\n {\n   myValue1: //add some logic with galSelectedItem\n },\n //Do something with the myValue1result\n )\n)\n```\n",
				"date_published": "2024-01-16T08:35:00-05:00",
				"url": "https://architect.ericgregorich.com/2024/01/16/the-power-apps.html"
			},
			{
				"id": "http://eg-architect.micro.blog/2024/01/12/validate-email-addresses.html",
				"title": "Validate Email Addresses in Power Apps",
				"content_html": "<p>A common request when building Power Apps is to validate the email address of a textbox. This can be done easily using the <a href=\"https://learn.microsoft.com/en-us/power-platform/power-fx/reference/function-ismatch?ref=thepowerarchitect.com\">IsMatch</a> function. The function also does all kinds of validation using regular expressions. The Match.Email property can be used to check if it’s a valid email automatically.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">If</span>(\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#a6e22e\">IsMatch</span>(\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#a6e22e\">txtValidationEmail</span>.<span style=\"color:#a6e22e\">Text</span>,\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#a6e22e\">Match</span>.<span style=\"color:#a6e22e\">Email</span>\n</span></span><span style=\"display:flex;\"><span>    ),\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">true</span> <span style=\"color:#75715e\">// The email address is valid\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    <span style=\"color:#66d9ef\">false</span> <span style=\"color:#75715e\">// The email address is not valid\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>)\n</span></span></code></pre></div><p>Here is an example of a TextInput and Icon control on the screen. The icon control shows a red error icon if the email is invalid and a green checkbox if it is valid.</p>\n<!-- raw HTML omitted -->\n<p>The text is not a valid email address and shows the red error icon.</p>\n<!-- raw HTML omitted -->\n<p>In the Icons <code>Icon</code> property, add the following.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">If</span>(\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#a6e22e\">IsMatch</span>(\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#a6e22e\">txtValidationEmail</span>.<span style=\"color:#a6e22e\">Text</span>,\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#a6e22e\">Match</span>.<span style=\"color:#a6e22e\">Email</span>\n</span></span><span style=\"display:flex;\"><span>    ),\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#a6e22e\">Icon</span>.<span style=\"color:#a6e22e\">CheckBadge</span>,\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#a6e22e\">Icon</span>.Error\n</span></span><span style=\"display:flex;\"><span>)\n</span></span></code></pre></div><p>Now, in the Icon’s <code>Color</code> property, add the following.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">If</span>(\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#a6e22e\">Self</span>.<span style=\"color:#a6e22e\">Icon</span><span style=\"color:#f92672\">=</span><span style=\"color:#a6e22e\">Icon</span>.Error,\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#a6e22e\">RGBA</span>(<span style=\"color:#ae81ff\">168</span>,<span style=\"color:#ae81ff\">0</span>,<span style=\"color:#ae81ff\">0</span>,<span style=\"color:#ae81ff\">1</span>),\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#a6e22e\">RGBA</span>(<span style=\"color:#ae81ff\">141</span>,<span style=\"color:#ae81ff\">198</span>,<span style=\"color:#ae81ff\">63</span>,<span style=\"color:#ae81ff\">1</span>)\n</span></span><span style=\"display:flex;\"><span>)\n</span></span></code></pre></div>",
				"content_text": "A common request when building Power Apps is to validate the email address of a textbox. This can be done easily using the [IsMatch](https://learn.microsoft.com/en-us/power-platform/power-fx/reference/function-ismatch?ref=thepowerarchitect.com) function. The function also does all kinds of validation using regular expressions. The Match.Email property can be used to check if it’s a valid email automatically.\n\n```js\nIf(\n    IsMatch(\n        txtValidationEmail.Text,\n        Match.Email\n    ),\n    true // The email address is valid\n    false // The email address is not valid\n)\n```\n\nHere is an example of a TextInput and Icon control on the screen. The icon control shows a red error icon if the email is invalid and a green checkbox if it is valid.\n\n\n<img style=\"display:block; margin-left:auto; margin-right:auto;\" src=\"https://eg-architect.micro.blog/uploads/2024/6ef1a23dd3.jpg\" alt=\"A red checkbox next to an invalid email address\" title=\"image-2.png\" border=\"0\" width=\"591\" height=\"52\" />\n\nThe text is not a valid email address and shows the red error icon.\n\n\n<img style=\"display:block; margin-left:auto; margin-right:auto;\" src=\"https://eg-architect.micro.blog/uploads/2024/802e351675.jpg\" alt=\"A green checkbox next to a valid email address.\" title=\"image-1.png\" border=\"0\" width=\"598\" height=\"51\" />\nThe text is a valid email address that shows the green check icon.\n\nIn the Icons `Icon` property, add the following.\n\n```js\nIf(\n    IsMatch(\n        txtValidationEmail.Text,\n        Match.Email\n    ),\n    Icon.CheckBadge,\n    Icon.Error\n)\n```\n\nNow, in the Icon’s `Color` property, add the following.\n\n```js\nIf(\n    Self.Icon=Icon.Error,\n    RGBA(168,0,0,1),\n    RGBA(141,198,63,1)\n)\n```\n",
				"date_published": "2024-01-12T08:32:00-05:00",
				"url": "https://architect.ericgregorich.com/2024/01/12/validate-email-addresses.html",
				"tags": ["Power Apps"]
			}
	]
}
